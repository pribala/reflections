What happens when you initialize a repository? Why do you need to do it?

Git creates an empty repository and creates the .git file. We need to do it to 
create a Git repo and start tracking the files in the repo for changes.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

Staging area is an intermediate area where you add files to be committed to the repo.
Working directory holds all the files you are currently working on but you are not
tracking these files. A repo has files that you are tracking and staging area is where
you put the files that you want to commit to the repo. It gives the user an area to
group files that need to be committed as a unit.

How can you use the staging area to make sure you have one commit per logical
change?

As and when you make changes to a file and add it to the staging area, the changes
haven't been committed yet. You then need to make some related code changes to other
files in your working directory. You make the changes and add the files to the staging
area and now you commit all the changes as one logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When you are working on an experimental feature or a different version of the program
branches would be helpful. You don't want to try something on the main working code
but on a separate branch. By giving readable names you can clearly maintain the file
history in an organized and understandable way. 

How do the diagrams help you visualize the branch structure?
Diagrams make it very clear as to the path of the branches and using diagrams it is
easy to trace the commit history of each branch and if any commit is unreachable.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result of merging the two branches is that now we have all the changes made in one branch 
available in the master along with the entire commit history. We can get to any commit on both 
the branches from the tip which is at master now. The diagram makes the flow easy to understand.
We can trace the parent of each commit in either branches and the effect of merging the two branches
using the diagram.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

If there are no conflicts automatic merges are efficient and quick. When there are 
conflicts they do need to be resolved manually before merging.
